#include <string>
#include <cstdlib>
#include <iomanip>
#include <map>
#include <cctype>
#include <iostream>
#include <fstream>
#include <sstream>
#include "lex.h"

using namespace std;

int main(int argc, char* argv[]) {
    istream* in = &cin;
    ifstream fileStream;
    LexItem tok;
    int lineNum = 0;
    int numofTokens = 0;
    int numofStrings = 0;
    int numofNumbers = 0;
    int numofBooleans = 0;
    int numofIdentifiers = 0;
    map<string, int> flags;
    map<string, int> uniqueIdentifiers;
    map<string, int> uniqueBooleans;
    map<string, int> uniqueStrings;
    map<string, int> uniqueNumerics;
    map<double, string> uniqueNumericsOrdering;
    map<string, string> numericConversion;


    if (argc <= 1) {
        cerr << "NO SPECIFIED INPUT FILE." << endl;
        exit(1);
    }
    else if (argc >= 2) {
        fileStream.open(argv[1]);
        if (fileStream.is_open()) {
            in = &fileStream;
            if (fileStream.peek() == EOF) {
                cerr << "Empty File." << endl;
                exit(1);
            }
        }
        else {
            cerr << "CANNOT OPEN THE FILE " << argv[1] << endl;
            exit(1);
        }
    }
    if (argc >= 3) {
        for (int count = 2; count < argc; count++) {
            string flagString = argv[count];
            if (flagString[0] != '-') {
                cerr << "ONLY ONE FILE NAME IS ALLOWED." << endl;
                exit(1);
            }
            else if (!((flagString == "-v") || (flagString == "-nconst") || (flagString == "-sconst") || (flagString == "-ident") || (flagString == "-bconst"))) {
                cerr << "UNRECOGNIZED FLAG {" << argv[count] << "}" << endl;
                exit(1);
            }
            if (flags.find(flagString) == flags.end()) {
                flags[flagString] = 1;
            }
            else {
                flags[flagString] += 1;
            }
        }
    }
    while ((tok = getNextToken(*in, lineNum)) != DONE && tok != ERR) {
        if (tok.GetToken() == IDENT || tok.GetToken() == END) {

            if (uniqueIdentifiers.find(tok.GetLexeme()) == uniqueIdentifiers.end()) {

                uniqueIdentifiers[tok.GetLexeme()] = 1;
                numofIdentifiers++;
            }
        }
        else if ((tok.GetToken() == ICONST) || (tok.GetToken() == RCONST)) {
            double converted = stod(tok.GetLexeme());
            if (uniqueNumericsOrdering.find(converted) == uniqueNumericsOrdering.end()) {
                uniqueNumerics[tok.GetLexeme()] = 1;
                uniqueNumericsOrdering[converted] = tok.GetLexeme();
                if (tok.GetToken() == ICONST) {
                    numericConversion[tok.GetLexeme()] = "ICONST";
                }
                else if (tok.GetToken() == RCONST) {
                    numericConversion[tok.GetLexeme()] = "RCONST";
                }
                numofNumbers++;
            }
        }
        else if (tok.GetToken() == SCONST) {
            if (uniqueStrings.find(tok.GetLexeme()) == uniqueStrings.end()) {
                uniqueStrings[tok.GetLexeme()] = 1;
                numofStrings++;
            }
        }
        else if (tok.GetToken() == BCONST) {
            if (uniqueBooleans.find(tok.GetLexeme()) == uniqueBooleans.end()) {
                uniqueBooleans[tok.GetLexeme()] = 1;
                numofBooleans++;
            }
        }
        if (flags.count("-v")) {
            std::cout << tok;
        }
        numofTokens++;
    }

    if (tok.GetToken() == ERR) {
        cerr << "Error in line " << tok.GetLinenum() << ": Unrecognized Lexeme {" << tok.GetLexeme() << "}" << endl;
        exit(1);
    }

    std::cout << "\nLines: " << lineNum << endl;
    std::cout << "Total Tokens: " << numofTokens << endl;
    std::cout << "Identifiers: " << numofIdentifiers << endl;
    std::cout << "Numbers: " << numofNumbers << endl;
    std::cout << "Booleans: " << numofBooleans << endl;
    std::cout << "Strings: " << numofStrings << endl;

    if (flags.count("-ident")) {
        map<string, int>::iterator identIterator;
        if (!uniqueIdentifiers.empty()) {
            int i = 0;
            std::cout << "IDENTIFIERS:" << endl;
            for (identIterator = uniqueIdentifiers.begin(); identIterator != uniqueIdentifiers.end(); identIterator++) {
                if (i < uniqueIdentifiers.size() - 1) {
                    std::cout << identIterator->first << ", ";
                    i++;
                }
                else {
                    std::cout << identIterator->first << endl;
                }
            }
        }
    }
    if (flags.count("-nconst")) {
        map<double, string>::iterator numericIterator;
        if (!uniqueNumericsOrdering.empty()) {
            std::cout << "NUMBERS:" << endl;
            for (numericIterator = uniqueNumericsOrdering.begin(); numericIterator != uniqueNumericsOrdering.end(); numericIterator++) {
                if (numericConversion[numericIterator->second] == "ICONST") {
                    std::cout << stoi(numericIterator->second) << endl;
                }
                else {
                    std::cout << stod(numericIterator->second) << endl;
                }
            }
        }
    }
    if (flags.count("-bconst")) {
        if (!uniqueBooleans.empty()) {
            cout << "BOOLEANS:" << endl;

            for (const auto& boolean : uniqueBooleans) {
                cout << boolean.first << endl;
            }
        }
    }
    if (flags.count("-sconst")) {
        if (!uniqueStrings.empty()) {
            cout << "STRINGS:" << endl;

            for (const auto& str : uniqueStrings) {
                cout << "\"" << str.first.substr(1, str.first.length() - 2) << "\"" << endl;
            }
        }
    }
    return 0;
}
